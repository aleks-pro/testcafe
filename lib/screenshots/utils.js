'use strict';

exports.__esModule = true;
exports.generateScreenshotMark = generateScreenshotMark;
exports.copyImagePart = copyImagePart;

var _pngjs = require('pngjs');

var _lodash = require('lodash');

var _generate = require('nanoid/generate');

var _generate2 = _interopRequireDefault(_generate);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ALPHABET = '01';

function generateScreenshotMark() {
    // NOTE: 32-bit id
    const id = (0, _generate2.default)(ALPHABET, _constants.MARK_LENGTH);

    // NOTE: array of RGB values
    const markSeed = (0, _lodash.flatten)((0, _lodash.map)(id, bit => bit === '0' ? [0, 0, 0, 255] : [255, 255, 255, 255]));

    // NOTE: macOS browsers can't display an element, if it's CSS height is lesser than 1.
    // It happens on Retina displays, because they have more than 1 physical pixel in a CSS pixel.
    // So increase mark size by prepending transparent pixels before the actual mark.
    const imageData = (0, _lodash.times)(_constants.MARK_BYTES_PER_PIXEL * _constants.MARK_LENGTH * (_constants.MARK_HEIGHT - 1), (0, _lodash.constant)(0)).concat(markSeed);
    const imageDataBuffer = Buffer.from(imageData);
    const pngImage = new _pngjs.PNG({ width: _constants.MARK_LENGTH, height: _constants.MARK_HEIGHT });

    imageDataBuffer.copy(pngImage.data);

    const markData = 'data:image/png;base64,' + _pngjs.PNG.sync.write(pngImage).toString('base64');

    return { markSeed, markData };
}

function copyImagePart(pngImage, { clipLeft, clipTop, clipRight, clipBottom }) {
    const width = clipRight - clipLeft;
    const height = clipBottom - clipTop;

    const dstImage = new _pngjs.PNG({ width, height });

    const stride = dstImage.width * _constants.MARK_BYTES_PER_PIXEL;

    for (let i = 0; i < height; i++) {
        const srcStartIndex = (pngImage.width * (i + clipTop) + clipLeft) * _constants.MARK_BYTES_PER_PIXEL;

        pngImage.data.copy(dstImage.data, stride * i, srcStartIndex, srcStartIndex + stride);
    }

    return dstImage;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JlZW5zaG90cy91dGlscy5qcyJdLCJuYW1lcyI6WyJnZW5lcmF0ZVNjcmVlbnNob3RNYXJrIiwiY29weUltYWdlUGFydCIsIkFMUEhBQkVUIiwiaWQiLCJtYXJrU2VlZCIsImJpdCIsImltYWdlRGF0YSIsImNvbmNhdCIsImltYWdlRGF0YUJ1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJwbmdJbWFnZSIsIndpZHRoIiwiaGVpZ2h0IiwiY29weSIsImRhdGEiLCJtYXJrRGF0YSIsInN5bmMiLCJ3cml0ZSIsInRvU3RyaW5nIiwiY2xpcExlZnQiLCJjbGlwVG9wIiwiY2xpcFJpZ2h0IiwiY2xpcEJvdHRvbSIsImRzdEltYWdlIiwic3RyaWRlIiwiaSIsInNyY1N0YXJ0SW5kZXgiXSwibWFwcGluZ3MiOiI7OztRQU9nQkEsc0IsR0FBQUEsc0I7UUFxQkFDLGEsR0FBQUEsYTs7QUE1QmhCOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNQyxXQUFXLElBQWpCOztBQUVPLFNBQVNGLHNCQUFULEdBQW1DO0FBQ3RDO0FBQ0EsVUFBTUcsS0FBSyx3QkFBV0QsUUFBWCx5QkFBWDs7QUFFQTtBQUNBLFVBQU1FLFdBQVcscUJBQVEsaUJBQUlELEVBQUosRUFBUUUsT0FBT0EsUUFBUSxHQUFSLEdBQWMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxHQUFWLENBQWQsR0FBK0IsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsR0FBaEIsQ0FBOUMsQ0FBUixDQUFqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFNQyxZQUFrQixtQkFBTSw0REFBc0MseUJBQWMsQ0FBcEQsQ0FBTixFQUE4RCxzQkFBUyxDQUFULENBQTlELEVBQTJFQyxNQUEzRSxDQUFrRkgsUUFBbEYsQ0FBeEI7QUFDQSxVQUFNSSxrQkFBa0JDLE9BQU9DLElBQVAsQ0FBWUosU0FBWixDQUF4QjtBQUNBLFVBQU1LLFdBQWtCLGVBQVEsRUFBRUMsNkJBQUYsRUFBc0JDLDhCQUF0QixFQUFSLENBQXhCOztBQUVBTCxvQkFBZ0JNLElBQWhCLENBQXFCSCxTQUFTSSxJQUE5Qjs7QUFFQSxVQUFNQyxXQUFXLDJCQUEyQixXQUFJQyxJQUFKLENBQVNDLEtBQVQsQ0FBZVAsUUFBZixFQUF5QlEsUUFBekIsQ0FBa0MsUUFBbEMsQ0FBNUM7O0FBRUEsV0FBTyxFQUFFZixRQUFGLEVBQVlZLFFBQVosRUFBUDtBQUNIOztBQUVNLFNBQVNmLGFBQVQsQ0FBd0JVLFFBQXhCLEVBQWtDLEVBQUVTLFFBQUYsRUFBWUMsT0FBWixFQUFxQkMsU0FBckIsRUFBZ0NDLFVBQWhDLEVBQWxDLEVBQWdGO0FBQ25GLFVBQU1YLFFBQVNVLFlBQVlGLFFBQTNCO0FBQ0EsVUFBTVAsU0FBU1UsYUFBYUYsT0FBNUI7O0FBRUEsVUFBTUcsV0FBVyxlQUFRLEVBQUVaLEtBQUYsRUFBU0MsTUFBVCxFQUFSLENBQWpCOztBQUVBLFVBQU1ZLFNBQVNELFNBQVNaLEtBQVQsa0NBQWY7O0FBRUEsU0FBSyxJQUFJYyxJQUFJLENBQWIsRUFBZ0JBLElBQUliLE1BQXBCLEVBQTRCYSxHQUE1QixFQUFpQztBQUM3QixjQUFNQyxnQkFBZ0IsQ0FBQ2hCLFNBQVNDLEtBQVQsSUFBa0JjLElBQUlMLE9BQXRCLElBQWlDRCxRQUFsQyxtQ0FBdEI7O0FBRUFULGlCQUFTSSxJQUFULENBQWNELElBQWQsQ0FBbUJVLFNBQVNULElBQTVCLEVBQWtDVSxTQUFTQyxDQUEzQyxFQUE4Q0MsYUFBOUMsRUFBNkRBLGdCQUFnQkYsTUFBN0U7QUFDSDs7QUFFRCxXQUFPRCxRQUFQO0FBQ0giLCJmaWxlIjoic2NyZWVuc2hvdHMvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQTkcgfSBmcm9tICdwbmdqcyc7XG5pbXBvcnQgeyBtYXAsIGZsYXR0ZW4sIHRpbWVzLCBjb25zdGFudCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgZ2VuZXJhdGVJZCBmcm9tICduYW5vaWQvZ2VuZXJhdGUnO1xuaW1wb3J0IHsgTUFSS19MRU5HVEgsIE1BUktfSEVJR0hULCBNQVJLX0JZVEVTX1BFUl9QSVhFTCB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuY29uc3QgQUxQSEFCRVQgPSAnMDEnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVTY3JlZW5zaG90TWFyayAoKSB7XG4gICAgLy8gTk9URTogMzItYml0IGlkXG4gICAgY29uc3QgaWQgPSBnZW5lcmF0ZUlkKEFMUEhBQkVULCBNQVJLX0xFTkdUSCk7XG5cbiAgICAvLyBOT1RFOiBhcnJheSBvZiBSR0IgdmFsdWVzXG4gICAgY29uc3QgbWFya1NlZWQgPSBmbGF0dGVuKG1hcChpZCwgYml0ID0+IGJpdCA9PT0gJzAnID8gWzAsIDAsIDAsIDI1NV0gOiBbMjU1LCAyNTUsIDI1NSwgMjU1XSkpO1xuXG4gICAgLy8gTk9URTogbWFjT1MgYnJvd3NlcnMgY2FuJ3QgZGlzcGxheSBhbiBlbGVtZW50LCBpZiBpdCdzIENTUyBoZWlnaHQgaXMgbGVzc2VyIHRoYW4gMS5cbiAgICAvLyBJdCBoYXBwZW5zIG9uIFJldGluYSBkaXNwbGF5cywgYmVjYXVzZSB0aGV5IGhhdmUgbW9yZSB0aGFuIDEgcGh5c2ljYWwgcGl4ZWwgaW4gYSBDU1MgcGl4ZWwuXG4gICAgLy8gU28gaW5jcmVhc2UgbWFyayBzaXplIGJ5IHByZXBlbmRpbmcgdHJhbnNwYXJlbnQgcGl4ZWxzIGJlZm9yZSB0aGUgYWN0dWFsIG1hcmsuXG4gICAgY29uc3QgaW1hZ2VEYXRhICAgICAgID0gdGltZXMoTUFSS19CWVRFU19QRVJfUElYRUwgKiBNQVJLX0xFTkdUSCAqIChNQVJLX0hFSUdIVCAtIDEpLCBjb25zdGFudCgwKSkuY29uY2F0KG1hcmtTZWVkKTtcbiAgICBjb25zdCBpbWFnZURhdGFCdWZmZXIgPSBCdWZmZXIuZnJvbShpbWFnZURhdGEpO1xuICAgIGNvbnN0IHBuZ0ltYWdlICAgICAgICA9IG5ldyBQTkcoeyB3aWR0aDogTUFSS19MRU5HVEgsIGhlaWdodDogTUFSS19IRUlHSFQgfSk7XG5cbiAgICBpbWFnZURhdGFCdWZmZXIuY29weShwbmdJbWFnZS5kYXRhKTtcblxuICAgIGNvbnN0IG1hcmtEYXRhID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnICsgUE5HLnN5bmMud3JpdGUocG5nSW1hZ2UpLnRvU3RyaW5nKCdiYXNlNjQnKTtcblxuICAgIHJldHVybiB7IG1hcmtTZWVkLCBtYXJrRGF0YSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weUltYWdlUGFydCAocG5nSW1hZ2UsIHsgY2xpcExlZnQsIGNsaXBUb3AsIGNsaXBSaWdodCwgY2xpcEJvdHRvbSB9KSB7XG4gICAgY29uc3Qgd2lkdGggID0gY2xpcFJpZ2h0IC0gY2xpcExlZnQ7XG4gICAgY29uc3QgaGVpZ2h0ID0gY2xpcEJvdHRvbSAtIGNsaXBUb3A7XG5cbiAgICBjb25zdCBkc3RJbWFnZSA9IG5ldyBQTkcoeyB3aWR0aCwgaGVpZ2h0IH0pO1xuXG4gICAgY29uc3Qgc3RyaWRlID0gZHN0SW1hZ2Uud2lkdGggKiBNQVJLX0JZVEVTX1BFUl9QSVhFTDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3JjU3RhcnRJbmRleCA9IChwbmdJbWFnZS53aWR0aCAqIChpICsgY2xpcFRvcCkgKyBjbGlwTGVmdCkgKiBNQVJLX0JZVEVTX1BFUl9QSVhFTDtcblxuICAgICAgICBwbmdJbWFnZS5kYXRhLmNvcHkoZHN0SW1hZ2UuZGF0YSwgc3RyaWRlICogaSwgc3JjU3RhcnRJbmRleCwgc3JjU3RhcnRJbmRleCArIHN0cmlkZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRzdEltYWdlO1xufVxuIl19
