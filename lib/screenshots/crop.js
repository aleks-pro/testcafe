'use strict';

exports.__esModule = true;
exports.cropScreenshot = undefined;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let cropScreenshot = exports.cropScreenshot = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (image, { path, markSeed, clientAreaDimensions, cropDimensions }) {
        if (!markSeed && !cropDimensions) return null;

        const clip = calculateClipInfo(image, path, markSeed, clientAreaDimensions, cropDimensions);

        return (0, _utils.copyImagePart)(image, clip);
    });

    return function cropScreenshot(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

exports.calculateMarkPosition = calculateMarkPosition;
exports.getClipInfoByMarkPosition = getClipInfoByMarkPosition;
exports.getClipInfoByCropDimensions = getClipInfoByCropDimensions;
exports.calculateClipInfo = calculateClipInfo;

var _utils = require('./utils');

var _limitNumber = require('../utils/limit-number');

var _limitNumber2 = _interopRequireDefault(_limitNumber);

var _renderTemplate = require('../utils/render-template');

var _renderTemplate2 = _interopRequireDefault(_renderTemplate);

var _testRun = require('../errors/test-run/');

var _constants = require('./constants');

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function markSeedToId(markSeed) {
    let id = 0;

    for (let i = 0; i < _constants.MARK_LENGTH; i++) id = id * 2 + (markSeed[i * _constants.MARK_BYTES_PER_PIXEL] ? 1 : 0);

    return id;
}

function calculateMarkPosition(pngImage, markSeed) {
    const mark = Buffer.from(markSeed);
    const markIndex = pngImage.data.indexOf(mark);

    if (markIndex < 0) return null;

    const endPosition = markIndex / _constants.MARK_BYTES_PER_PIXEL + _constants.MARK_LENGTH + _constants.MARK_RIGHT_MARGIN;

    const x = endPosition % pngImage.width || pngImage.width;
    const y = (endPosition - x) / pngImage.width + 1;

    return { x, y };
}

function getClipInfoByMarkPosition(markPosition, { width, height }) {
    const x = markPosition.x,
          y = markPosition.y;


    const clipRight = x;
    const clipBottom = y;
    const clipLeft = clipRight - width;
    const clipTop = clipBottom - height;

    return {
        clipLeft,
        clipTop,
        clipRight,
        clipBottom
    };
}

function getClipInfoByCropDimensions({ clipRight, clipLeft, clipBottom, clipTop }, cropDimensions) {
    if (cropDimensions) {
        const right = cropDimensions.right,
              top = cropDimensions.top,
              bottom = cropDimensions.bottom,
              left = cropDimensions.left;


        clipRight = (0, _limitNumber2.default)(clipLeft + right, clipLeft, clipRight);
        clipBottom = (0, _limitNumber2.default)(clipTop + bottom, clipTop, clipBottom);
        clipLeft = (0, _limitNumber2.default)(clipLeft + left, clipLeft, clipRight);
        clipTop = (0, _limitNumber2.default)(clipTop + top, clipTop, clipBottom);
    }

    return {
        clipLeft,
        clipTop,
        clipRight,
        clipBottom
    };
}

function calculateClipInfo(pngImage, path, markSeed, clientAreaDimensions, cropDimensions) {
    let clipInfo = {
        clipRight: pngImage.width,
        clipBottom: pngImage.height,
        clipLeft: 0,
        clipTop: 0
    };

    let markPosition = null;

    if (markSeed && clientAreaDimensions) {
        markPosition = calculateMarkPosition(pngImage, markSeed);

        if (!markPosition) throw new Error((0, _renderTemplate2.default)(_warningMessage2.default.screenshotMarkNotFound, path, markSeedToId(markSeed)));

        clipInfo = getClipInfoByMarkPosition(markPosition, clientAreaDimensions);
    }

    clipInfo = getClipInfoByCropDimensions(clipInfo, cropDimensions);

    if (markPosition && markPosition.y === clipInfo.clipBottom) clipInfo.clipBottom--;

    const clipWidth = clipInfo.clipRight - clipInfo.clipLeft;
    const clipHeight = clipInfo.clipBottom - clipInfo.clipTop;

    if (clipWidth <= 0 || clipHeight <= 0) throw new _testRun.InvalidElementScreenshotDimensionsError(clipWidth, clipHeight);

    return clipInfo;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
