'use strict';

exports.__esModule = true;
exports.assertUrl = assertUrl;
exports.resolvePageUrl = resolvePageUrl;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _runtime = require('../errors/runtime');

var _types = require('../errors/types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PROTOCOL_RE = /^([\w-]+?)(?=:\/\/)/;
const SUPPORTED_PROTOCOL_RE = /^(https?|file):/;
const IMPLICIT_PROTOCOL_RE = /^\/\//;
const ABSOLUTE_PATH_RE = /^\/[^/]/;
const WIN_ABSOLUTE_PATH_RE = /^\w:[/\\]/;
const RELATIVE_PATH_RE = /^\.\.?[/\\]/;

function isAbsolutePath(url) {
    return _osFamily2.default.win ? WIN_ABSOLUTE_PATH_RE.test(url) : ABSOLUTE_PATH_RE.test(url);
}

function resolveFileUrl(url, testFileName) {
    const testFileDir = _path2.default.dirname(testFileName);

    if (RELATIVE_PATH_RE.test(url)) url = _path2.default.join(testFileDir, url);

    return 'file://' + url;
}

function assertUrl(url, callsiteName) {
    const protocol = url.match(PROTOCOL_RE);
    const hasUnsupportedProtocol = protocol && !SUPPORTED_PROTOCOL_RE.test(url);
    const isWinAbsolutePath = _osFamily2.default.win && WIN_ABSOLUTE_PATH_RE.test(url);

    if (hasUnsupportedProtocol && !isWinAbsolutePath && url !== 'about:blank') throw new _runtime.APIError(callsiteName, _types.RUNTIME_ERRORS.unsupportedUrlProtocol, url, protocol[0]);
}

function resolvePageUrl(url, testFileName) {
    if (SUPPORTED_PROTOCOL_RE.test(url) || url === 'about:blank') return url;

    if (isAbsolutePath(url) || RELATIVE_PATH_RE.test(url)) return resolveFileUrl(url, testFileName);

    const protocol = IMPLICIT_PROTOCOL_RE.test(url) ? 'http:' : 'http://';

    return protocol + url;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVzdC1wYWdlLXVybC5qcyJdLCJuYW1lcyI6WyJhc3NlcnRVcmwiLCJyZXNvbHZlUGFnZVVybCIsIlBST1RPQ09MX1JFIiwiU1VQUE9SVEVEX1BST1RPQ09MX1JFIiwiSU1QTElDSVRfUFJPVE9DT0xfUkUiLCJBQlNPTFVURV9QQVRIX1JFIiwiV0lOX0FCU09MVVRFX1BBVEhfUkUiLCJSRUxBVElWRV9QQVRIX1JFIiwiaXNBYnNvbHV0ZVBhdGgiLCJ1cmwiLCJ3aW4iLCJ0ZXN0IiwicmVzb2x2ZUZpbGVVcmwiLCJ0ZXN0RmlsZU5hbWUiLCJ0ZXN0RmlsZURpciIsImRpcm5hbWUiLCJqb2luIiwiY2FsbHNpdGVOYW1lIiwicHJvdG9jb2wiLCJtYXRjaCIsImhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wiLCJpc1dpbkFic29sdXRlUGF0aCIsInVuc3VwcG9ydGVkVXJsUHJvdG9jb2wiXSwibWFwcGluZ3MiOiI7OztRQTBCZ0JBLFMsR0FBQUEsUztRQVNBQyxjLEdBQUFBLGM7O0FBbkNoQjs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQyxjQUF3QixxQkFBOUI7QUFDQSxNQUFNQyx3QkFBd0IsaUJBQTlCO0FBQ0EsTUFBTUMsdUJBQXdCLE9BQTlCO0FBQ0EsTUFBTUMsbUJBQXdCLFNBQTlCO0FBQ0EsTUFBTUMsdUJBQXdCLFdBQTlCO0FBQ0EsTUFBTUMsbUJBQXdCLGFBQTlCOztBQUdBLFNBQVNDLGNBQVQsQ0FBeUJDLEdBQXpCLEVBQThCO0FBQzFCLFdBQU8sbUJBQUdDLEdBQUgsR0FBU0oscUJBQXFCSyxJQUFyQixDQUEwQkYsR0FBMUIsQ0FBVCxHQUEwQ0osaUJBQWlCTSxJQUFqQixDQUFzQkYsR0FBdEIsQ0FBakQ7QUFDSDs7QUFFRCxTQUFTRyxjQUFULENBQXlCSCxHQUF6QixFQUE4QkksWUFBOUIsRUFBNEM7QUFDeEMsVUFBTUMsY0FBYyxlQUFLQyxPQUFMLENBQWFGLFlBQWIsQ0FBcEI7O0FBRUEsUUFBSU4saUJBQWlCSSxJQUFqQixDQUFzQkYsR0FBdEIsQ0FBSixFQUNJQSxNQUFNLGVBQUtPLElBQUwsQ0FBVUYsV0FBVixFQUF1QkwsR0FBdkIsQ0FBTjs7QUFFSixXQUFPLFlBQVlBLEdBQW5CO0FBQ0g7O0FBRU0sU0FBU1QsU0FBVCxDQUFvQlMsR0FBcEIsRUFBeUJRLFlBQXpCLEVBQXVDO0FBQzFDLFVBQU1DLFdBQXlCVCxJQUFJVSxLQUFKLENBQVVqQixXQUFWLENBQS9CO0FBQ0EsVUFBTWtCLHlCQUF5QkYsWUFBWSxDQUFDZixzQkFBc0JRLElBQXRCLENBQTJCRixHQUEzQixDQUE1QztBQUNBLFVBQU1ZLG9CQUF5QixtQkFBR1gsR0FBSCxJQUFVSixxQkFBcUJLLElBQXJCLENBQTBCRixHQUExQixDQUF6Qzs7QUFFQSxRQUFJVywwQkFBMEIsQ0FBQ0MsaUJBQTNCLElBQWdEWixRQUFRLGFBQTVELEVBQ0ksTUFBTSxzQkFBYVEsWUFBYixFQUEyQixzQkFBZUssc0JBQTFDLEVBQWtFYixHQUFsRSxFQUF1RVMsU0FBUyxDQUFULENBQXZFLENBQU47QUFDUDs7QUFFTSxTQUFTakIsY0FBVCxDQUF5QlEsR0FBekIsRUFBOEJJLFlBQTlCLEVBQTRDO0FBQy9DLFFBQUlWLHNCQUFzQlEsSUFBdEIsQ0FBMkJGLEdBQTNCLEtBQW1DQSxRQUFRLGFBQS9DLEVBQ0ksT0FBT0EsR0FBUDs7QUFFSixRQUFJRCxlQUFlQyxHQUFmLEtBQXVCRixpQkFBaUJJLElBQWpCLENBQXNCRixHQUF0QixDQUEzQixFQUNJLE9BQU9HLGVBQWVILEdBQWYsRUFBb0JJLFlBQXBCLENBQVA7O0FBRUosVUFBTUssV0FBV2QscUJBQXFCTyxJQUFyQixDQUEwQkYsR0FBMUIsSUFBaUMsT0FBakMsR0FBMkMsU0FBNUQ7O0FBRUEsV0FBT1MsV0FBV1QsR0FBbEI7QUFDSCIsImZpbGUiOiJhcGkvdGVzdC1wYWdlLXVybC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IFJVTlRJTUVfRVJST1JTIH0gZnJvbSAnLi4vZXJyb3JzL3R5cGVzJztcblxuY29uc3QgUFJPVE9DT0xfUkUgICAgICAgICAgID0gL14oW1xcdy1dKz8pKD89OlxcL1xcLykvO1xuY29uc3QgU1VQUE9SVEVEX1BST1RPQ09MX1JFID0gL14oaHR0cHM/fGZpbGUpOi87XG5jb25zdCBJTVBMSUNJVF9QUk9UT0NPTF9SRSAgPSAvXlxcL1xcLy87XG5jb25zdCBBQlNPTFVURV9QQVRIX1JFICAgICAgPSAvXlxcL1teL10vO1xuY29uc3QgV0lOX0FCU09MVVRFX1BBVEhfUkUgID0gL15cXHc6Wy9cXFxcXS87XG5jb25zdCBSRUxBVElWRV9QQVRIX1JFICAgICAgPSAvXlxcLlxcLj9bL1xcXFxdLztcblxuXG5mdW5jdGlvbiBpc0Fic29sdXRlUGF0aCAodXJsKSB7XG4gICAgcmV0dXJuIE9TLndpbiA/IFdJTl9BQlNPTFVURV9QQVRIX1JFLnRlc3QodXJsKSA6IEFCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRmlsZVVybCAodXJsLCB0ZXN0RmlsZU5hbWUpIHtcbiAgICBjb25zdCB0ZXN0RmlsZURpciA9IHBhdGguZGlybmFtZSh0ZXN0RmlsZU5hbWUpO1xuXG4gICAgaWYgKFJFTEFUSVZFX1BBVEhfUkUudGVzdCh1cmwpKVxuICAgICAgICB1cmwgPSBwYXRoLmpvaW4odGVzdEZpbGVEaXIsIHVybCk7XG5cbiAgICByZXR1cm4gJ2ZpbGU6Ly8nICsgdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VXJsICh1cmwsIGNhbGxzaXRlTmFtZSkge1xuICAgIGNvbnN0IHByb3RvY29sICAgICAgICAgICAgICAgPSB1cmwubWF0Y2goUFJPVE9DT0xfUkUpO1xuICAgIGNvbnN0IGhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wgPSBwcm90b2NvbCAmJiAhU1VQUE9SVEVEX1BST1RPQ09MX1JFLnRlc3QodXJsKTtcbiAgICBjb25zdCBpc1dpbkFic29sdXRlUGF0aCAgICAgID0gT1Mud2luICYmIFdJTl9BQlNPTFVURV9QQVRIX1JFLnRlc3QodXJsKTtcblxuICAgIGlmIChoYXNVbnN1cHBvcnRlZFByb3RvY29sICYmICFpc1dpbkFic29sdXRlUGF0aCAmJiB1cmwgIT09ICdhYm91dDpibGFuaycpXG4gICAgICAgIHRocm93IG5ldyBBUElFcnJvcihjYWxsc2l0ZU5hbWUsIFJVTlRJTUVfRVJST1JTLnVuc3VwcG9ydGVkVXJsUHJvdG9jb2wsIHVybCwgcHJvdG9jb2xbMF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhZ2VVcmwgKHVybCwgdGVzdEZpbGVOYW1lKSB7XG4gICAgaWYgKFNVUFBPUlRFRF9QUk9UT0NPTF9SRS50ZXN0KHVybCkgfHwgdXJsID09PSAnYWJvdXQ6YmxhbmsnKVxuICAgICAgICByZXR1cm4gdXJsO1xuXG4gICAgaWYgKGlzQWJzb2x1dGVQYXRoKHVybCkgfHwgUkVMQVRJVkVfUEFUSF9SRS50ZXN0KHVybCkpXG4gICAgICAgIHJldHVybiByZXNvbHZlRmlsZVVybCh1cmwsIHRlc3RGaWxlTmFtZSk7XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IElNUExJQ0lUX1BST1RPQ09MX1JFLnRlc3QodXJsKSA/ICdodHRwOicgOiAnaHR0cDovLyc7XG5cbiAgICByZXR1cm4gcHJvdG9jb2wgKyB1cmw7XG59XG4iXX0=
