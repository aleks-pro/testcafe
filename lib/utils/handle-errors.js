'use strict';

exports.__esModule = true;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

exports.registerErrorHandlers = registerErrorHandlers;
exports.addRunningTest = addRunningTest;
exports.removeRunningTest = removeRunningTest;
exports.startHandlingTestErrors = startHandlingTestErrors;
exports.stopHandlingTestErrors = stopHandlingTestErrors;

var _testRun = require('../errors/test-run');

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const runningTests = {};
let handlingTestErrors = false;

function printErrorMessagesAndTerminate(...messages) {
    // eslint-disable-next-line no-console
    messages.map(msg => console.log(msg));

    // eslint-disable-next-line no-process-exit
    setTimeout(() => process.exit(1), 0);
}

function handleTestRunError(ErrorCtor, message) {
    (0, _values2.default)(runningTests).forEach(testRun => {
        testRun.addError(new ErrorCtor(message));

        removeRunningTest(testRun);
    });
}

function handleError(ErrorCtor, message) {
    if (handlingTestErrors) handleTestRunError(ErrorCtor, message);else printErrorMessagesAndTerminate(message);
}

function formatUnhandledRejectionReason(reason) {
    const reasonType = typeof reason;
    const isPrimitiveType = reasonType !== 'object' && reasonType !== 'function';

    if (isPrimitiveType) return String(reason);

    if (reason instanceof Error) return reason.stack;

    return _util2.default.inspect(reason, { depth: 2, breakLength: Infinity });
}

function formatError(ErrorCtor, error) {
    if (ErrorCtor === _testRun.UncaughtExceptionError) return error.stack;

    if (ErrorCtor === _testRun.UnhandledPromiseRejectionError) return formatUnhandledRejectionReason(error);

    return error;
}

function handleUnexpectedError(ErrorCtor, error) {
    try {
        handleError(ErrorCtor, formatError(ErrorCtor, error));
    } catch (e) {
        printErrorMessagesAndTerminate(error, e);
    }
}

function registerErrorHandlers() {
    process.on('unhandledRejection', e => handleUnexpectedError(_testRun.UnhandledPromiseRejectionError, e));
    process.on('uncaughtException', e => handleUnexpectedError(_testRun.UncaughtExceptionError, e));
}

function addRunningTest(testRun) {
    runningTests[testRun.id] = testRun;
}

function removeRunningTest(testRun) {
    if (testRun) delete runningTests[testRun.id];
}

function startHandlingTestErrors() {
    handlingTestErrors = true;
}

function stopHandlingTestErrors() {
    handlingTestErrors = false;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oYW5kbGUtZXJyb3JzLmpzIl0sIm5hbWVzIjpbInJlZ2lzdGVyRXJyb3JIYW5kbGVycyIsImFkZFJ1bm5pbmdUZXN0IiwicmVtb3ZlUnVubmluZ1Rlc3QiLCJzdGFydEhhbmRsaW5nVGVzdEVycm9ycyIsInN0b3BIYW5kbGluZ1Rlc3RFcnJvcnMiLCJydW5uaW5nVGVzdHMiLCJoYW5kbGluZ1Rlc3RFcnJvcnMiLCJwcmludEVycm9yTWVzc2FnZXNBbmRUZXJtaW5hdGUiLCJtZXNzYWdlcyIsIm1hcCIsIm1zZyIsImNvbnNvbGUiLCJsb2ciLCJzZXRUaW1lb3V0IiwicHJvY2VzcyIsImV4aXQiLCJoYW5kbGVUZXN0UnVuRXJyb3IiLCJFcnJvckN0b3IiLCJtZXNzYWdlIiwiZm9yRWFjaCIsInRlc3RSdW4iLCJhZGRFcnJvciIsImhhbmRsZUVycm9yIiwiZm9ybWF0VW5oYW5kbGVkUmVqZWN0aW9uUmVhc29uIiwicmVhc29uIiwicmVhc29uVHlwZSIsImlzUHJpbWl0aXZlVHlwZSIsIlN0cmluZyIsIkVycm9yIiwic3RhY2siLCJpbnNwZWN0IiwiZGVwdGgiLCJicmVha0xlbmd0aCIsIkluZmluaXR5IiwiZm9ybWF0RXJyb3IiLCJlcnJvciIsImhhbmRsZVVuZXhwZWN0ZWRFcnJvciIsImUiLCJvbiIsImlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztRQTZEZ0JBLHFCLEdBQUFBLHFCO1FBS0FDLGMsR0FBQUEsYztRQUlBQyxpQixHQUFBQSxpQjtRQUtBQyx1QixHQUFBQSx1QjtRQUlBQyxzQixHQUFBQSxzQjs7QUEvRWhCOztBQUNBOzs7Ozs7QUFFQSxNQUFNQyxlQUFtQixFQUF6QjtBQUNBLElBQUlDLHFCQUFxQixLQUF6Qjs7QUFFQSxTQUFTQyw4QkFBVCxDQUF5QyxHQUFHQyxRQUE1QyxFQUFzRDtBQUNsRDtBQUNBQSxhQUFTQyxHQUFULENBQWFDLE9BQU9DLFFBQVFDLEdBQVIsQ0FBWUYsR0FBWixDQUFwQjs7QUFFQTtBQUNBRyxlQUFXLE1BQU1DLFFBQVFDLElBQVIsQ0FBYSxDQUFiLENBQWpCLEVBQWtDLENBQWxDO0FBQ0g7O0FBRUQsU0FBU0Msa0JBQVQsQ0FBNkJDLFNBQTdCLEVBQXdDQyxPQUF4QyxFQUFpRDtBQUM3QywwQkFBY2IsWUFBZCxFQUE0QmMsT0FBNUIsQ0FBb0NDLFdBQVc7QUFDM0NBLGdCQUFRQyxRQUFSLENBQWlCLElBQUlKLFNBQUosQ0FBY0MsT0FBZCxDQUFqQjs7QUFFQWhCLDBCQUFrQmtCLE9BQWxCO0FBQ0gsS0FKRDtBQUtIOztBQUVELFNBQVNFLFdBQVQsQ0FBc0JMLFNBQXRCLEVBQWlDQyxPQUFqQyxFQUEwQztBQUN0QyxRQUFJWixrQkFBSixFQUNJVSxtQkFBbUJDLFNBQW5CLEVBQThCQyxPQUE5QixFQURKLEtBR0lYLCtCQUErQlcsT0FBL0I7QUFDUDs7QUFFRCxTQUFTSyw4QkFBVCxDQUF5Q0MsTUFBekMsRUFBaUQ7QUFDN0MsVUFBTUMsYUFBa0IsT0FBT0QsTUFBL0I7QUFDQSxVQUFNRSxrQkFBa0JELGVBQWUsUUFBZixJQUEyQkEsZUFBZSxVQUFsRTs7QUFFQSxRQUFJQyxlQUFKLEVBQ0ksT0FBT0MsT0FBT0gsTUFBUCxDQUFQOztBQUVKLFFBQUlBLGtCQUFrQkksS0FBdEIsRUFDSSxPQUFPSixPQUFPSyxLQUFkOztBQUVKLFdBQU8sZUFBS0MsT0FBTCxDQUFhTixNQUFiLEVBQXFCLEVBQUVPLE9BQU8sQ0FBVCxFQUFZQyxhQUFhQyxRQUF6QixFQUFyQixDQUFQO0FBQ0g7O0FBRUQsU0FBU0MsV0FBVCxDQUFzQmpCLFNBQXRCLEVBQWlDa0IsS0FBakMsRUFBd0M7QUFDcEMsUUFBSWxCLDZDQUFKLEVBQ0ksT0FBT2tCLE1BQU1OLEtBQWI7O0FBRUosUUFBSVoscURBQUosRUFDSSxPQUFPTSwrQkFBK0JZLEtBQS9CLENBQVA7O0FBRUosV0FBT0EsS0FBUDtBQUNIOztBQUVELFNBQVNDLHFCQUFULENBQWdDbkIsU0FBaEMsRUFBMkNrQixLQUEzQyxFQUFrRDtBQUM5QyxRQUFJO0FBQ0FiLG9CQUFZTCxTQUFaLEVBQXVCaUIsWUFBWWpCLFNBQVosRUFBdUJrQixLQUF2QixDQUF2QjtBQUNILEtBRkQsQ0FHQSxPQUFPRSxDQUFQLEVBQVU7QUFDTjlCLHVDQUErQjRCLEtBQS9CLEVBQXNDRSxDQUF0QztBQUNIO0FBQ0o7O0FBRU0sU0FBU3JDLHFCQUFULEdBQWtDO0FBQ3JDYyxZQUFRd0IsRUFBUixDQUFXLG9CQUFYLEVBQWlDRCxLQUFLRCwrREFBc0RDLENBQXRELENBQXRDO0FBQ0F2QixZQUFRd0IsRUFBUixDQUFXLG1CQUFYLEVBQWdDRCxLQUFLRCx1REFBOENDLENBQTlDLENBQXJDO0FBQ0g7O0FBRU0sU0FBU3BDLGNBQVQsQ0FBeUJtQixPQUF6QixFQUFrQztBQUNyQ2YsaUJBQWFlLFFBQVFtQixFQUFyQixJQUEyQm5CLE9BQTNCO0FBQ0g7O0FBRU0sU0FBU2xCLGlCQUFULENBQTRCa0IsT0FBNUIsRUFBcUM7QUFDeEMsUUFBSUEsT0FBSixFQUNJLE9BQU9mLGFBQWFlLFFBQVFtQixFQUFyQixDQUFQO0FBQ1A7O0FBRU0sU0FBU3BDLHVCQUFULEdBQW9DO0FBQ3ZDRyx5QkFBcUIsSUFBckI7QUFDSDs7QUFFTSxTQUFTRixzQkFBVCxHQUFtQztBQUN0Q0UseUJBQXFCLEtBQXJCO0FBQ0giLCJmaWxlIjoidXRpbHMvaGFuZGxlLWVycm9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVuaGFuZGxlZFByb21pc2VSZWplY3Rpb25FcnJvciwgVW5jYXVnaHRFeGNlcHRpb25FcnJvciB9IGZyb20gJy4uL2Vycm9ycy90ZXN0LXJ1bic7XG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcblxuY29uc3QgcnVubmluZ1Rlc3RzICAgICA9IHt9O1xubGV0IGhhbmRsaW5nVGVzdEVycm9ycyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBwcmludEVycm9yTWVzc2FnZXNBbmRUZXJtaW5hdGUgKC4uLm1lc3NhZ2VzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBtZXNzYWdlcy5tYXAobXNnID0+IGNvbnNvbGUubG9nKG1zZykpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZXhpdFxuICAgIHNldFRpbWVvdXQoKCkgPT4gcHJvY2Vzcy5leGl0KDEpLCAwKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVGVzdFJ1bkVycm9yIChFcnJvckN0b3IsIG1lc3NhZ2UpIHtcbiAgICBPYmplY3QudmFsdWVzKHJ1bm5pbmdUZXN0cykuZm9yRWFjaCh0ZXN0UnVuID0+IHtcbiAgICAgICAgdGVzdFJ1bi5hZGRFcnJvcihuZXcgRXJyb3JDdG9yKG1lc3NhZ2UpKTtcblxuICAgICAgICByZW1vdmVSdW5uaW5nVGVzdCh0ZXN0UnVuKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKEVycm9yQ3RvciwgbWVzc2FnZSkge1xuICAgIGlmIChoYW5kbGluZ1Rlc3RFcnJvcnMpXG4gICAgICAgIGhhbmRsZVRlc3RSdW5FcnJvcihFcnJvckN0b3IsIG1lc3NhZ2UpO1xuICAgIGVsc2VcbiAgICAgICAgcHJpbnRFcnJvck1lc3NhZ2VzQW5kVGVybWluYXRlKG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbmhhbmRsZWRSZWplY3Rpb25SZWFzb24gKHJlYXNvbikge1xuICAgIGNvbnN0IHJlYXNvblR5cGUgICAgICA9IHR5cGVvZiByZWFzb247XG4gICAgY29uc3QgaXNQcmltaXRpdmVUeXBlID0gcmVhc29uVHlwZSAhPT0gJ29iamVjdCcgJiYgcmVhc29uVHlwZSAhPT0gJ2Z1bmN0aW9uJztcblxuICAgIGlmIChpc1ByaW1pdGl2ZVR5cGUpXG4gICAgICAgIHJldHVybiBTdHJpbmcocmVhc29uKTtcblxuICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBFcnJvcilcbiAgICAgICAgcmV0dXJuIHJlYXNvbi5zdGFjaztcblxuICAgIHJldHVybiB1dGlsLmluc3BlY3QocmVhc29uLCB7IGRlcHRoOiAyLCBicmVha0xlbmd0aDogSW5maW5pdHkgfSk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yIChFcnJvckN0b3IsIGVycm9yKSB7XG4gICAgaWYgKEVycm9yQ3RvciA9PT0gVW5jYXVnaHRFeGNlcHRpb25FcnJvcilcbiAgICAgICAgcmV0dXJuIGVycm9yLnN0YWNrO1xuXG4gICAgaWYgKEVycm9yQ3RvciA9PT0gVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbkVycm9yKVxuICAgICAgICByZXR1cm4gZm9ybWF0VW5oYW5kbGVkUmVqZWN0aW9uUmVhc29uKGVycm9yKTtcblxuICAgIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVW5leHBlY3RlZEVycm9yIChFcnJvckN0b3IsIGVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaGFuZGxlRXJyb3IoRXJyb3JDdG9yLCBmb3JtYXRFcnJvcihFcnJvckN0b3IsIGVycm9yKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHByaW50RXJyb3JNZXNzYWdlc0FuZFRlcm1pbmF0ZShlcnJvciwgZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFcnJvckhhbmRsZXJzICgpIHtcbiAgICBwcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCBlID0+IGhhbmRsZVVuZXhwZWN0ZWRFcnJvcihVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uRXJyb3IsIGUpKTtcbiAgICBwcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIGUgPT4gaGFuZGxlVW5leHBlY3RlZEVycm9yKFVuY2F1Z2h0RXhjZXB0aW9uRXJyb3IsIGUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJ1bm5pbmdUZXN0ICh0ZXN0UnVuKSB7XG4gICAgcnVubmluZ1Rlc3RzW3Rlc3RSdW4uaWRdID0gdGVzdFJ1bjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVJ1bm5pbmdUZXN0ICh0ZXN0UnVuKSB7XG4gICAgaWYgKHRlc3RSdW4pXG4gICAgICAgIGRlbGV0ZSBydW5uaW5nVGVzdHNbdGVzdFJ1bi5pZF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydEhhbmRsaW5nVGVzdEVycm9ycyAoKSB7XG4gICAgaGFuZGxpbmdUZXN0RXJyb3JzID0gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BIYW5kbGluZ1Rlc3RFcnJvcnMgKCkge1xuICAgIGhhbmRsaW5nVGVzdEVycm9ycyA9IGZhbHNlO1xufVxuIl19
