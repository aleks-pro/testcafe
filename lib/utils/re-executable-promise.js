'use strict';

exports.__esModule = true;

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _testRunTracker = require('../api/test-run-tracker');

var _testRunTracker2 = _interopRequireDefault(_testRunTracker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ReExecutablePromise extends _pinkie2.default {
    constructor(executorFn) {
        super(_lodash.noop);

        this._fn = executorFn;
        this._taskPromise = null;
    }

    _ensureExecuting() {
        if (!this._taskPromise) this._taskPromise = new _pinkie2.default(this._fn);
    }

    _reExecute() {
        this._taskPromise = null;

        return this;
    }

    then(onFulfilled, onRejected) {
        this._ensureExecuting();

        return this._taskPromise.then(onFulfilled, onRejected);
    }

    catch(onRejected) {
        this._ensureExecuting();

        return this._taskPromise.catch(onRejected);
    }

    static fromFn(asyncExecutorFn) {
        const testRunId = _testRunTracker2.default.getContextTestRunId();

        if (testRunId) asyncExecutorFn = _testRunTracker2.default.addTrackingMarkerToFunction(testRunId, asyncExecutorFn);

        return new ReExecutablePromise(resolve => resolve(asyncExecutorFn()));
    }
}
exports.default = ReExecutablePromise;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9yZS1leGVjdXRhYmxlLXByb21pc2UuanMiXSwibmFtZXMiOlsiUmVFeGVjdXRhYmxlUHJvbWlzZSIsImNvbnN0cnVjdG9yIiwiZXhlY3V0b3JGbiIsIl9mbiIsIl90YXNrUHJvbWlzZSIsIl9lbnN1cmVFeGVjdXRpbmciLCJfcmVFeGVjdXRlIiwidGhlbiIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiZnJvbUZuIiwiYXN5bmNFeGVjdXRvckZuIiwidGVzdFJ1bklkIiwiZ2V0Q29udGV4dFRlc3RSdW5JZCIsImFkZFRyYWNraW5nTWFya2VyVG9GdW5jdGlvbiIsInJlc29sdmUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFFZSxNQUFNQSxtQkFBTiwwQkFBMEM7QUFDckRDLGdCQUFhQyxVQUFiLEVBQXlCO0FBQ3JCOztBQUVBLGFBQUtDLEdBQUwsR0FBb0JELFVBQXBCO0FBQ0EsYUFBS0UsWUFBTCxHQUFvQixJQUFwQjtBQUNIOztBQUVEQyx1QkFBb0I7QUFDaEIsWUFBSSxDQUFDLEtBQUtELFlBQVYsRUFDSSxLQUFLQSxZQUFMLEdBQW9CLHFCQUFZLEtBQUtELEdBQWpCLENBQXBCO0FBQ1A7O0FBRURHLGlCQUFjO0FBQ1YsYUFBS0YsWUFBTCxHQUFvQixJQUFwQjs7QUFFQSxlQUFPLElBQVA7QUFDSDs7QUFFREcsU0FBTUMsV0FBTixFQUFtQkMsVUFBbkIsRUFBK0I7QUFDM0IsYUFBS0osZ0JBQUw7O0FBRUEsZUFBTyxLQUFLRCxZQUFMLENBQWtCRyxJQUFsQixDQUF1QkMsV0FBdkIsRUFBb0NDLFVBQXBDLENBQVA7QUFDSDs7QUFFREMsVUFBT0QsVUFBUCxFQUFtQjtBQUNmLGFBQUtKLGdCQUFMOztBQUVBLGVBQU8sS0FBS0QsWUFBTCxDQUFrQk0sS0FBbEIsQ0FBd0JELFVBQXhCLENBQVA7QUFDSDs7QUFFRCxXQUFPRSxNQUFQLENBQWVDLGVBQWYsRUFBZ0M7QUFDNUIsY0FBTUMsWUFBWSx5QkFBZUMsbUJBQWYsRUFBbEI7O0FBRUEsWUFBSUQsU0FBSixFQUNJRCxrQkFBa0IseUJBQWVHLDJCQUFmLENBQTJDRixTQUEzQyxFQUFzREQsZUFBdEQsQ0FBbEI7O0FBRUosZUFBTyxJQUFJWixtQkFBSixDQUF3QmdCLFdBQVdBLFFBQVFKLGlCQUFSLENBQW5DLENBQVA7QUFDSDtBQXRDb0Q7a0JBQXBDWixtQiIsImZpbGUiOiJ1dGlscy9yZS1leGVjdXRhYmxlLXByb21pc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZSBmcm9tICdwaW5raWUnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgdGVzdFJ1blRyYWNrZXIgZnJvbSAnLi4vYXBpL3Rlc3QtcnVuLXRyYWNrZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZUV4ZWN1dGFibGVQcm9taXNlIGV4dGVuZHMgUHJvbWlzZSB7XG4gICAgY29uc3RydWN0b3IgKGV4ZWN1dG9yRm4pIHtcbiAgICAgICAgc3VwZXIobm9vcCk7XG5cbiAgICAgICAgdGhpcy5fZm4gICAgICAgICAgPSBleGVjdXRvckZuO1xuICAgICAgICB0aGlzLl90YXNrUHJvbWlzZSA9IG51bGw7XG4gICAgfVxuXG4gICAgX2Vuc3VyZUV4ZWN1dGluZyAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGFza1Byb21pc2UpXG4gICAgICAgICAgICB0aGlzLl90YXNrUHJvbWlzZSA9IG5ldyBQcm9taXNlKHRoaXMuX2ZuKTtcbiAgICB9XG5cbiAgICBfcmVFeGVjdXRlICgpIHtcbiAgICAgICAgdGhpcy5fdGFza1Byb21pc2UgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoZW4gKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUV4ZWN1dGluZygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl90YXNrUHJvbWlzZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICB9XG5cbiAgICBjYXRjaCAob25SZWplY3RlZCkge1xuICAgICAgICB0aGlzLl9lbnN1cmVFeGVjdXRpbmcoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fdGFza1Byb21pc2UuY2F0Y2gob25SZWplY3RlZCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21GbiAoYXN5bmNFeGVjdXRvckZuKSB7XG4gICAgICAgIGNvbnN0IHRlc3RSdW5JZCA9IHRlc3RSdW5UcmFja2VyLmdldENvbnRleHRUZXN0UnVuSWQoKTtcblxuICAgICAgICBpZiAodGVzdFJ1bklkKVxuICAgICAgICAgICAgYXN5bmNFeGVjdXRvckZuID0gdGVzdFJ1blRyYWNrZXIuYWRkVHJhY2tpbmdNYXJrZXJUb0Z1bmN0aW9uKHRlc3RSdW5JZCwgYXN5bmNFeGVjdXRvckZuKTtcblxuICAgICAgICByZXR1cm4gbmV3IFJlRXhlY3V0YWJsZVByb21pc2UocmVzb2x2ZSA9PiByZXNvbHZlKGFzeW5jRXhlY3V0b3JGbigpKSk7XG4gICAgfVxufVxuIl19
