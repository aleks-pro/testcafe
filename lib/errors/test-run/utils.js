'use strict';

exports.__esModule = true;
exports.renderForbiddenCharsList = renderForbiddenCharsList;
exports.formatUrl = formatUrl;
exports.formatSelectorCallstack = formatSelectorCallstack;
exports.replaceLeadingSpacesWithNbsp = replaceLeadingSpacesWithNbsp;
exports.markup = markup;

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

var _lodash = require('lodash');

var _phase = require('../../test-run/phase');

var _phase2 = _interopRequireDefault(_phase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SUBTITLES = {
    [_phase2.default.initial]: '',
    [_phase2.default.inFixtureBeforeHook]: '<span class="subtitle">Error in fixture.before hook</span>\n',
    [_phase2.default.inFixtureBeforeEachHook]: '<span class="subtitle">Error in fixture.beforeEach hook</span>\n',
    [_phase2.default.inTestBeforeHook]: '<span class="subtitle">Error in test.before hook</span>\n',
    [_phase2.default.inTest]: '',
    [_phase2.default.inTestAfterHook]: '<span class="subtitle">Error in test.after hook</span>\n',
    [_phase2.default.inFixtureAfterEachHook]: '<span class="subtitle">Error in fixture.afterEach hook</span>\n',
    [_phase2.default.inFixtureAfterHook]: '<span class="subtitle">Error in fixture.after hook</span>\n',
    [_phase2.default.inRoleInitializer]: '<span class="subtitle">Error in Role initializer</span>\n',
    [_phase2.default.inBookmarkRestore]: '<span class="subtitle">Error while restoring configuration after Role switch</span>\n'
};

function renderForbiddenCharsList(forbiddenCharsList) {
    return forbiddenCharsList.map(charInfo => `\t"${charInfo.chars}" at index ${charInfo.index}\n`).join('');
}

function formatUrl(url) {
    return `<a href="${url}">${url}</a>`;
}

function formatSelectorCallstack(apiFnChain, apiFnIndex, viewportWidth) {
    if (typeof apiFnIndex === 'undefined') return '';

    const emptySpaces = 10;
    const ellipsis = '...)';
    const availableWidth = viewportWidth - emptySpaces;

    return apiFnChain.map((apiFn, index) => {
        let formattedApiFn = String.fromCharCode(160);

        formattedApiFn += index === apiFnIndex ? '>' : ' ';
        formattedApiFn += ' | ';
        formattedApiFn += index !== 0 ? '  ' : '';
        formattedApiFn += apiFn;

        if (formattedApiFn.length > availableWidth) return formattedApiFn.substr(0, availableWidth - emptySpaces) + ellipsis;

        return formattedApiFn;
    }).join('\n');
}

function replaceLeadingSpacesWithNbsp(str) {
    return str.replace(/^ +/mg, match => {
        return (0, _lodash.repeat)('&nbsp;', match.length);
    });
}

function markup(err, msgMarkup, opts = {}) {
    msgMarkup = (0, _dedent2.default)(`
        ${SUBTITLES[err.testRunPhase]}<div class="message">${(0, _dedent2.default)(msgMarkup)}</div>

        <strong>Browser:</strong> <span class="user-agent">${err.userAgent}</span>
    `);

    if (err.screenshotPath) msgMarkup += `\n<div class="screenshot-info"><strong>Screenshot:</strong> <a class="screenshot-path">${(0, _lodash.escape)(err.screenshotPath)}</a></div>`;

    if (!opts.withoutCallsite) {
        const callsiteMarkup = err.getCallsiteMarkup();

        if (callsiteMarkup) msgMarkup += `\n\n${callsiteMarkup}`;
    }

    return msgMarkup.replace('\t', '&nbsp;'.repeat(4));
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lcnJvcnMvdGVzdC1ydW4vdXRpbHMuanMiXSwibmFtZXMiOlsicmVuZGVyRm9yYmlkZGVuQ2hhcnNMaXN0IiwiZm9ybWF0VXJsIiwiZm9ybWF0U2VsZWN0b3JDYWxsc3RhY2siLCJyZXBsYWNlTGVhZGluZ1NwYWNlc1dpdGhOYnNwIiwibWFya3VwIiwiU1VCVElUTEVTIiwiaW5pdGlhbCIsImluRml4dHVyZUJlZm9yZUhvb2siLCJpbkZpeHR1cmVCZWZvcmVFYWNoSG9vayIsImluVGVzdEJlZm9yZUhvb2siLCJpblRlc3QiLCJpblRlc3RBZnRlckhvb2siLCJpbkZpeHR1cmVBZnRlckVhY2hIb29rIiwiaW5GaXh0dXJlQWZ0ZXJIb29rIiwiaW5Sb2xlSW5pdGlhbGl6ZXIiLCJpbkJvb2ttYXJrUmVzdG9yZSIsImZvcmJpZGRlbkNoYXJzTGlzdCIsIm1hcCIsImNoYXJJbmZvIiwiY2hhcnMiLCJpbmRleCIsImpvaW4iLCJ1cmwiLCJhcGlGbkNoYWluIiwiYXBpRm5JbmRleCIsInZpZXdwb3J0V2lkdGgiLCJlbXB0eVNwYWNlcyIsImVsbGlwc2lzIiwiYXZhaWxhYmxlV2lkdGgiLCJhcGlGbiIsImZvcm1hdHRlZEFwaUZuIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibGVuZ3RoIiwic3Vic3RyIiwic3RyIiwicmVwbGFjZSIsIm1hdGNoIiwiZXJyIiwibXNnTWFya3VwIiwib3B0cyIsInRlc3RSdW5QaGFzZSIsInVzZXJBZ2VudCIsInNjcmVlbnNob3RQYXRoIiwid2l0aG91dENhbGxzaXRlIiwiY2FsbHNpdGVNYXJrdXAiLCJnZXRDYWxsc2l0ZU1hcmt1cCIsInJlcGVhdCJdLCJtYXBwaW5ncyI6Ijs7O1FBaUJnQkEsd0IsR0FBQUEsd0I7UUFJQUMsUyxHQUFBQSxTO1FBSUFDLHVCLEdBQUFBLHVCO1FBdUJBQyw0QixHQUFBQSw0QjtRQU1BQyxNLEdBQUFBLE07O0FBdERoQjs7OztBQUNBOztBQUNBOzs7Ozs7QUFFQSxNQUFNQyxZ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ZmlsZSI6ImVycm9ycy90ZXN0LXJ1bi91dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWRlbnQgZnJvbSAnZGVkZW50JztcbmltcG9ydCB7IGVzY2FwZSBhcyBlc2NhcGVIdG1sLCByZXBlYXQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFRFU1RfUlVOX1BIQVNFIGZyb20gJy4uLy4uL3Rlc3QtcnVuL3BoYXNlJztcblxuY29uc3QgU1VCVElUTEVTID0ge1xuICAgIFtURVNUX1JVTl9QSEFTRS5pbml0aWFsXTogICAgICAgICAgICAgICAgICcnLFxuICAgIFtURVNUX1JVTl9QSEFTRS5pbkZpeHR1cmVCZWZvcmVIb29rXTogICAgICc8c3BhbiBjbGFzcz1cInN1YnRpdGxlXCI+RXJyb3IgaW4gZml4dHVyZS5iZWZvcmUgaG9vazwvc3Bhbj5cXG4nLFxuICAgIFtURVNUX1JVTl9QSEFTRS5pbkZpeHR1cmVCZWZvcmVFYWNoSG9va106ICc8c3BhbiBjbGFzcz1cInN1YnRpdGxlXCI+RXJyb3IgaW4gZml4dHVyZS5iZWZvcmVFYWNoIGhvb2s8L3NwYW4+XFxuJyxcbiAgICBbVEVTVF9SVU5fUEhBU0UuaW5UZXN0QmVmb3JlSG9va106ICAgICAgICAnPHNwYW4gY2xhc3M9XCJzdWJ0aXRsZVwiPkVycm9yIGluIHRlc3QuYmVmb3JlIGhvb2s8L3NwYW4+XFxuJyxcbiAgICBbVEVTVF9SVU5fUEhBU0UuaW5UZXN0XTogICAgICAgICAgICAgICAgICAnJyxcbiAgICBbVEVTVF9SVU5fUEhBU0UuaW5UZXN0QWZ0ZXJIb29rXTogICAgICAgICAnPHNwYW4gY2xhc3M9XCJzdWJ0aXRsZVwiPkVycm9yIGluIHRlc3QuYWZ0ZXIgaG9vazwvc3Bhbj5cXG4nLFxuICAgIFtURVNUX1JVTl9QSEFTRS5pbkZpeHR1cmVBZnRlckVhY2hIb29rXTogICc8c3BhbiBjbGFzcz1cInN1YnRpdGxlXCI+RXJyb3IgaW4gZml4dHVyZS5hZnRlckVhY2ggaG9vazwvc3Bhbj5cXG4nLFxuICAgIFtURVNUX1JVTl9QSEFTRS5pbkZpeHR1cmVBZnRlckhvb2tdOiAgICAgICc8c3BhbiBjbGFzcz1cInN1YnRpdGxlXCI+RXJyb3IgaW4gZml4dHVyZS5hZnRlciBob29rPC9zcGFuPlxcbicsXG4gICAgW1RFU1RfUlVOX1BIQVNFLmluUm9sZUluaXRpYWxpemVyXTogICAgICAgJzxzcGFuIGNsYXNzPVwic3VidGl0bGVcIj5FcnJvciBpbiBSb2xlIGluaXRpYWxpemVyPC9zcGFuPlxcbicsXG4gICAgW1RFU1RfUlVOX1BIQVNFLmluQm9va21hcmtSZXN0b3JlXTogICAgICAgJzxzcGFuIGNsYXNzPVwic3VidGl0bGVcIj5FcnJvciB3aGlsZSByZXN0b3JpbmcgY29uZmlndXJhdGlvbiBhZnRlciBSb2xlIHN3aXRjaDwvc3Bhbj5cXG4nXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRm9yYmlkZGVuQ2hhcnNMaXN0IChmb3JiaWRkZW5DaGFyc0xpc3QpIHtcbiAgICByZXR1cm4gZm9yYmlkZGVuQ2hhcnNMaXN0Lm1hcChjaGFySW5mbyA9PiBgXFx0XCIke2NoYXJJbmZvLmNoYXJzfVwiIGF0IGluZGV4ICR7Y2hhckluZm8uaW5kZXh9XFxuYCkuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRVcmwgKHVybCkge1xuICAgIHJldHVybiBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7dXJsfTwvYT5gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0U2VsZWN0b3JDYWxsc3RhY2sgKGFwaUZuQ2hhaW4sIGFwaUZuSW5kZXgsIHZpZXdwb3J0V2lkdGgpIHtcbiAgICBpZiAodHlwZW9mIGFwaUZuSW5kZXggPT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXR1cm4gJyc7XG5cbiAgICBjb25zdCBlbXB0eVNwYWNlcyAgICA9IDEwO1xuICAgIGNvbnN0IGVsbGlwc2lzICAgICAgID0gJy4uLiknO1xuICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gdmlld3BvcnRXaWR0aCAtIGVtcHR5U3BhY2VzO1xuXG4gICAgcmV0dXJuIGFwaUZuQ2hhaW4ubWFwKChhcGlGbiwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IGZvcm1hdHRlZEFwaUZuID0gU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApO1xuXG4gICAgICAgIGZvcm1hdHRlZEFwaUZuICs9IGluZGV4ID09PSBhcGlGbkluZGV4ID8gJz4nIDogJyAnO1xuICAgICAgICBmb3JtYXR0ZWRBcGlGbiArPSAnIHwgJztcbiAgICAgICAgZm9ybWF0dGVkQXBpRm4gKz0gaW5kZXggIT09IDAgPyAnICAnIDogJyc7XG4gICAgICAgIGZvcm1hdHRlZEFwaUZuICs9IGFwaUZuO1xuXG4gICAgICAgIGlmIChmb3JtYXR0ZWRBcGlGbi5sZW5ndGggPiBhdmFpbGFibGVXaWR0aClcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWRBcGlGbi5zdWJzdHIoMCwgYXZhaWxhYmxlV2lkdGggLSBlbXB0eVNwYWNlcykgKyBlbGxpcHNpcztcblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkQXBpRm47XG4gICAgfSkuam9pbignXFxuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlTGVhZGluZ1NwYWNlc1dpdGhOYnNwIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL14gKy9tZywgbWF0Y2ggPT4ge1xuICAgICAgICByZXR1cm4gcmVwZWF0KCcmbmJzcDsnLCBtYXRjaC5sZW5ndGgpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFya3VwIChlcnIsIG1zZ01hcmt1cCwgb3B0cyA9IHt9KSB7XG4gICAgbXNnTWFya3VwID0gZGVkZW50KGBcbiAgICAgICAgJHtTVUJUSVRMRVNbZXJyLnRlc3RSdW5QaGFzZV19PGRpdiBjbGFzcz1cIm1lc3NhZ2VcIj4ke2RlZGVudChtc2dNYXJrdXApfTwvZGl2PlxuXG4gICAgICAgIDxzdHJvbmc+QnJvd3Nlcjo8L3N0cm9uZz4gPHNwYW4gY2xhc3M9XCJ1c2VyLWFnZW50XCI+JHtlcnIudXNlckFnZW50fTwvc3Bhbj5cbiAgICBgKTtcblxuICAgIGlmIChlcnIuc2NyZWVuc2hvdFBhdGgpXG4gICAgICAgIG1zZ01hcmt1cCArPSBgXFxuPGRpdiBjbGFzcz1cInNjcmVlbnNob3QtaW5mb1wiPjxzdHJvbmc+U2NyZWVuc2hvdDo8L3N0cm9uZz4gPGEgY2xhc3M9XCJzY3JlZW5zaG90LXBhdGhcIj4ke2VzY2FwZUh0bWwoZXJyLnNjcmVlbnNob3RQYXRoKX08L2E+PC9kaXY+YDtcblxuICAgIGlmICghb3B0cy53aXRob3V0Q2FsbHNpdGUpIHtcbiAgICAgICAgY29uc3QgY2FsbHNpdGVNYXJrdXAgPSBlcnIuZ2V0Q2FsbHNpdGVNYXJrdXAoKTtcblxuICAgICAgICBpZiAoY2FsbHNpdGVNYXJrdXApXG4gICAgICAgICAgICBtc2dNYXJrdXAgKz0gYFxcblxcbiR7Y2FsbHNpdGVNYXJrdXB9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gbXNnTWFya3VwXG4gICAgICAgIC5yZXBsYWNlKCdcXHQnLCAnJm5ic3A7Jy5yZXBlYXQoNCkpO1xufVxuIl19
