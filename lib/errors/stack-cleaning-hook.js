'use strict';

exports.__esModule = true;

var _errorStackParser = require('error-stack-parser');

var _errorStackParser2 = _interopRequireDefault(_errorStackParser);

var _createStackFilter = require('./create-stack-filter');

var _createStackFilter2 = _interopRequireDefault(_createStackFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ORIGINAL_STACK_TRACE_LIMIT = Error.stackTraceLimit;
const STACK_TRACE_LIMIT = 200;
const STACK_TRACE_LINE_RE = /^\s+at\s+.*$/;

exports.default = {
    isEnabled: false,

    _isStackTraceLine(stackLine) {
        return stackLine.match(STACK_TRACE_LINE_RE);
    },

    _eraseOriginalStack(error) {
        if (!error.stack) {
            error.stack = '';
            return;
        }

        const stackLines = error.stack.split('\n');

        let stackLinesCount = 0;

        while (stackLinesCount < stackLines.length && this._isStackTraceLine(stackLines[stackLines.length - 1 - stackLinesCount])) stackLinesCount++;

        error.stack = stackLines.slice(0, stackLines.length - stackLinesCount).join('\n');

        if (stackLinesCount > 0) error.stack += '\n';
    },

    _getFrames(error) {
        try {
            return _errorStackParser2.default.parse(error);
        } catch (e) {
            return [];
        }
    },

    _renderFrameInfo(frames) {
        return frames.map(frame => frame.getSource()).join('\n');
    },

    get enabled() {
        return this.isEnabled;
    },

    set enabled(val) {
        if (this.isEnabled === val) return;

        this.isEnabled = val;

        // NOTE: Babel errors may have really deep stacks,
        // so we increase stack trace capacity
        if (this.isEnabled) Error.stackTraceLimit = STACK_TRACE_LIMIT;else Error.stackTraceLimit = ORIGINAL_STACK_TRACE_LIMIT;
    },

    cleanError(error) {
        let frames = this._getFrames(error);

        if (!frames.length) return error;

        this._eraseOriginalStack(error);

        frames = frames.filter((0, _createStackFilter2.default)(ORIGINAL_STACK_TRACE_LIMIT));

        error.stack += this._renderFrameInfo(frames);

        return error;
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMvc3RhY2stY2xlYW5pbmctaG9vay5qcyJdLCJuYW1lcyI6WyJPUklHSU5BTF9TVEFDS19UUkFDRV9MSU1JVCIsIkVycm9yIiwic3RhY2tUcmFjZUxpbWl0IiwiU1RBQ0tfVFJBQ0VfTElNSVQiLCJTVEFDS19UUkFDRV9MSU5FX1JFIiwiaXNFbmFibGVkIiwiX2lzU3RhY2tUcmFjZUxpbmUiLCJzdGFja0xpbmUiLCJtYXRjaCIsIl9lcmFzZU9yaWdpbmFsU3RhY2siLCJlcnJvciIsInN0YWNrIiwic3RhY2tMaW5lcyIsInNwbGl0Iiwic3RhY2tMaW5lc0NvdW50IiwibGVuZ3RoIiwic2xpY2UiLCJqb2luIiwiX2dldEZyYW1lcyIsInBhcnNlIiwiZSIsIl9yZW5kZXJGcmFtZUluZm8iLCJmcmFtZXMiLCJtYXAiLCJmcmFtZSIsImdldFNvdXJjZSIsImVuYWJsZWQiLCJ2YWwiLCJjbGVhbkVycm9yIiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7Ozs7O0FBR0EsTUFBTUEsNkJBQTZCQyxNQUFNQyxlQUF6QztBQUNBLE1BQU1DLG9CQUE2QixHQUFuQztBQUNBLE1BQU1DLHNCQUE2QixjQUFuQzs7a0JBR2U7QUFDWEMsZUFBVyxLQURBOztBQUdYQyxzQkFBbUJDLFNBQW5CLEVBQThCO0FBQzFCLGVBQU9BLFVBQVVDLEtBQVYsQ0FBZ0JKLG1CQUFoQixDQUFQO0FBQ0gsS0FMVTs7QUFPWEssd0JBQXFCQyxLQUFyQixFQUE0QjtBQUN4QixZQUFJLENBQUNBLE1BQU1DLEtBQVgsRUFBa0I7QUFDZEQsa0JBQU1DLEtBQU4sR0FBYyxFQUFkO0FBQ0E7QUFDSDs7QUFFRCxjQUFNQyxhQUFhRixNQUFNQyxLQUFOLENBQVlFLEtBQVosQ0FBa0IsSUFBbEIsQ0FBbkI7O0FBRUEsWUFBSUMsa0JBQWtCLENBQXRCOztBQUVBLGVBQU9BLGtCQUFrQkYsV0FBV0csTUFBN0IsSUFBdUMsS0FBS1QsaUJBQUwsQ0FBdUJNLFdBQVdBLFdBQVdHLE1BQVgsR0FBb0IsQ0FBcEIsR0FBd0JELGVBQW5DLENBQXZCLENBQTlDLEVBQ0lBOztBQUVKSixjQUFNQyxLQUFOLEdBQWNDLFdBQVdJLEtBQVgsQ0FBaUIsQ0FBakIsRUFBb0JKLFdBQVdHLE1BQVgsR0FBb0JELGVBQXhDLEVBQXlERyxJQUF6RCxDQUE4RCxJQUE5RCxDQUFkOztBQUVBLFlBQUlILGtCQUFrQixDQUF0QixFQUNJSixNQUFNQyxLQUFOLElBQWUsSUFBZjtBQUNQLEtBeEJVOztBQTBCWE8sZUFBWVIsS0FBWixFQUFtQjtBQUNmLFlBQUk7QUFDQSxtQkFBTywyQkFBaUJTLEtBQWpCLENBQXVCVCxLQUF2QixDQUFQO0FBQ0gsU0FGRCxDQUdBLE9BQU9VLENBQVAsRUFBVTtBQUNOLG1CQUFPLEVBQVA7QUFDSDtBQUNKLEtBakNVOztBQW1DWEMscUJBQWtCQyxNQUFsQixFQUEwQjtBQUN0QixlQUFPQSxPQUFPQyxHQUFQLENBQVdDLFNBQVNBLE1BQU1DLFNBQU4sRUFBcEIsRUFBdUNSLElBQXZDLENBQTRDLElBQTVDLENBQVA7QUFDSCxLQXJDVTs7QUF1Q1gsUUFBSVMsT0FBSixHQUFlO0FBQ1gsZUFBTyxLQUFLckIsU0FBWjtBQUNILEtBekNVOztBQTJDWCxRQUFJcUIsT0FBSixDQUFhQyxHQUFiLEVBQWtCO0FBQ2QsWUFBSSxLQUFLdEIsU0FBTCxLQUFtQnNCLEdBQXZCLEVBQ0k7O0FBRUosYUFBS3RCLFNBQUwsR0FBaUJzQixHQUFqQjs7QUFFQTtBQUNBO0FBQ0EsWUFBSSxLQUFLdEIsU0FBVCxFQUNJSixNQUFNQyxlQUFOLEdBQXdCQyxpQkFBeEIsQ0FESixLQUdJRixNQUFNQyxlQUFOLEdBQXdCRiwwQkFBeEI7QUFDUCxLQXZEVTs7QUF5RFg0QixlQUFZbEIsS0FBWixFQUFtQjtBQUNmLFlBQUlZLFNBQVMsS0FBS0osVUFBTCxDQUFnQlIsS0FBaEIsQ0FBYjs7QUFFQSxZQUFJLENBQUNZLE9BQU9QLE1BQVosRUFDSSxPQUFPTCxLQUFQOztBQUVKLGFBQUtELG1CQUFMLENBQXlCQyxLQUF6Qjs7QUFFQVksaUJBQVNBLE9BQU9PLE1BQVAsQ0FBYyxpQ0FBa0I3QiwwQkFBbEIsQ0FBZCxDQUFUOztBQUVBVSxjQUFNQyxLQUFOLElBQWUsS0FBS1UsZ0JBQUwsQ0FBc0JDLE1BQXRCLENBQWY7O0FBRUEsZUFBT1osS0FBUDtBQUNIO0FBdEVVLEMiLCJmaWxlIjoiZXJyb3JzL3N0YWNrLWNsZWFuaW5nLWhvb2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXJyb3JTdGFja1BhcnNlciBmcm9tICdlcnJvci1zdGFjay1wYXJzZXInO1xuaW1wb3J0IGNyZWF0ZVN0YWNrRmlsdGVyIGZyb20gJy4vY3JlYXRlLXN0YWNrLWZpbHRlcic7XG5cblxuY29uc3QgT1JJR0lOQUxfU1RBQ0tfVFJBQ0VfTElNSVQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG5jb25zdCBTVEFDS19UUkFDRV9MSU1JVCAgICAgICAgICA9IDIwMDtcbmNvbnN0IFNUQUNLX1RSQUNFX0xJTkVfUkUgICAgICAgID0gL15cXHMrYXRcXHMrLiokLztcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgaXNFbmFibGVkOiBmYWxzZSxcblxuICAgIF9pc1N0YWNrVHJhY2VMaW5lIChzdGFja0xpbmUpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrTGluZS5tYXRjaChTVEFDS19UUkFDRV9MSU5FX1JFKTtcbiAgICB9LFxuXG4gICAgX2VyYXNlT3JpZ2luYWxTdGFjayAoZXJyb3IpIHtcbiAgICAgICAgaWYgKCFlcnJvci5zdGFjaykge1xuICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSAnJztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YWNrTGluZXMgPSBlcnJvci5zdGFjay5zcGxpdCgnXFxuJyk7XG5cbiAgICAgICAgbGV0IHN0YWNrTGluZXNDb3VudCA9IDA7XG5cbiAgICAgICAgd2hpbGUgKHN0YWNrTGluZXNDb3VudCA8IHN0YWNrTGluZXMubGVuZ3RoICYmIHRoaXMuX2lzU3RhY2tUcmFjZUxpbmUoc3RhY2tMaW5lc1tzdGFja0xpbmVzLmxlbmd0aCAtIDEgLSBzdGFja0xpbmVzQ291bnRdKSlcbiAgICAgICAgICAgIHN0YWNrTGluZXNDb3VudCsrO1xuXG4gICAgICAgIGVycm9yLnN0YWNrID0gc3RhY2tMaW5lcy5zbGljZSgwLCBzdGFja0xpbmVzLmxlbmd0aCAtIHN0YWNrTGluZXNDb3VudCkuam9pbignXFxuJyk7XG5cbiAgICAgICAgaWYgKHN0YWNrTGluZXNDb3VudCA+IDApXG4gICAgICAgICAgICBlcnJvci5zdGFjayArPSAnXFxuJztcbiAgICB9LFxuXG4gICAgX2dldEZyYW1lcyAoZXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclN0YWNrUGFyc2VyLnBhcnNlKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9yZW5kZXJGcmFtZUluZm8gKGZyYW1lcykge1xuICAgICAgICByZXR1cm4gZnJhbWVzLm1hcChmcmFtZSA9PiBmcmFtZS5nZXRTb3VyY2UoKSkuam9pbignXFxuJyk7XG4gICAgfSxcblxuICAgIGdldCBlbmFibGVkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFbmFibGVkO1xuICAgIH0sXG5cbiAgICBzZXQgZW5hYmxlZCAodmFsKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCA9PT0gdmFsKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuaXNFbmFibGVkID0gdmFsO1xuXG4gICAgICAgIC8vIE5PVEU6IEJhYmVsIGVycm9ycyBtYXkgaGF2ZSByZWFsbHkgZGVlcCBzdGFja3MsXG4gICAgICAgIC8vIHNvIHdlIGluY3JlYXNlIHN0YWNrIHRyYWNlIGNhcGFjaXR5XG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZClcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IFNUQUNLX1RSQUNFX0xJTUlUO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBPUklHSU5BTF9TVEFDS19UUkFDRV9MSU1JVDtcbiAgICB9LFxuXG4gICAgY2xlYW5FcnJvciAoZXJyb3IpIHtcbiAgICAgICAgbGV0IGZyYW1lcyA9IHRoaXMuX2dldEZyYW1lcyhlcnJvcik7XG5cbiAgICAgICAgaWYgKCFmcmFtZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuXG4gICAgICAgIHRoaXMuX2VyYXNlT3JpZ2luYWxTdGFjayhlcnJvcik7XG5cbiAgICAgICAgZnJhbWVzID0gZnJhbWVzLmZpbHRlcihjcmVhdGVTdGFja0ZpbHRlcihPUklHSU5BTF9TVEFDS19UUkFDRV9MSU1JVCkpO1xuXG4gICAgICAgIGVycm9yLnN0YWNrICs9IHRoaXMuX3JlbmRlckZyYW1lSW5mbyhmcmFtZXMpO1xuXG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG59O1xuIl19
