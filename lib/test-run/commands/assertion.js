'use strict';

exports.__esModule = true;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _runtime = require('../../errors/runtime');

var _testRun = require('../../errors/test-run');

var _executeJsExpression = require('../execute-js-expression');

var _executeJsExpression2 = _interopRequireDefault(_executeJsExpression);

var _utils = require('./utils');

var _argument = require('./validations/argument');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initializers
function initAssertionOptions(name, val) {
    return new _options.AssertionOptions(val, true);
}

//Initializers
function initAssertionParameter(name, val, { skipVisibilityCheck, testRun }) {
    try {
        if ((0, _utils.isJSExpression)(val)) val = (0, _executeJsExpression2.default)(val.value, testRun, { skipVisibilityCheck });

        return val;
    } catch (err) {
        throw new _testRun.AssertionExecutableArgumentError(name, val.value, err, err instanceof _runtime.APIError);
    }
}

// Commands
class AssertionCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.assertion);
    }

    _getAssignableProperties() {
        return [{ name: 'assertionType', type: _argument.nonEmptyStringArgument, required: true }, { name: 'actual', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected2', init: initAssertionParameter, defaultValue: void 0 }, { name: 'message', type: _argument.stringArgument, defaultValue: null }, { name: 'options', type: _argument.actionOptions, init: initAssertionOptions, required: true }];
    }
}
exports.default = AssertionCommand;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9hc3NlcnRpb24uanMiXSwibmFtZXMiOlsiaW5pdEFzc2VydGlvbk9wdGlvbnMiLCJuYW1lIiwidmFsIiwiaW5pdEFzc2VydGlvblBhcmFtZXRlciIsInNraXBWaXNpYmlsaXR5Q2hlY2siLCJ0ZXN0UnVuIiwidmFsdWUiLCJlcnIiLCJBc3NlcnRpb25Db21tYW5kIiwiY29uc3RydWN0b3IiLCJvYmoiLCJhc3NlcnRpb24iLCJfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMiLCJ0eXBlIiwicmVxdWlyZWQiLCJpbml0IiwiZGVmYXVsdFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBRUE7Ozs7QUFFQTtBQUNBLFNBQVNBLG9CQUFULENBQStCQyxJQUEvQixFQUFxQ0MsR0FBckMsRUFBMEM7QUFDdEMsV0FBTyw4QkFBcUJBLEdBQXJCLEVBQTBCLElBQTFCLENBQVA7QUFDSDs7QUFFRDtBQUNBLFNBQVNDLHNCQUFULENBQWlDRixJQUFqQyxFQUF1Q0MsR0FBdkMsRUFBNEMsRUFBRUUsbUJBQUYsRUFBdUJDLE9BQXZCLEVBQTVDLEVBQThFO0FBQzFFLFFBQUk7QUFDQSxZQUFJLDJCQUFlSCxHQUFmLENBQUosRUFDSUEsTUFBTSxtQ0FBb0JBLElBQUlJLEtBQXhCLEVBQStCRCxPQUEvQixFQUF3QyxFQUFFRCxtQkFBRixFQUF4QyxDQUFOOztBQUVKLGVBQU9GLEdBQVA7QUFDSCxLQUxELENBTUEsT0FBT0ssR0FBUCxFQUFZO0FBQ1IsY0FBTSw4Q0FBcUNOLElBQXJDLEVBQTJDQyxJQUFJSSxLQUEvQyxFQUFzREMsR0FBdEQsRUFBMkRBLGdDQUEzRCxDQUFOO0FBQ0g7QUFDSjs7QUFFRDtBQUNlLE1BQU1DLGdCQUFOLHdCQUEyQztBQUN0REMsZ0JBQWFDLEdBQWIsRUFBa0JMLE9BQWxCLEVBQTJCO0FBQ3ZCLGNBQU1LLEdBQU4sRUFBV0wsT0FBWCxFQUFvQixlQUFLTSxTQUF6QjtBQUNIOztBQUVEQywrQkFBNEI7QUFDeEIsZUFBTyxDQUNILEVBQUVYLE1BQU0sZUFBUixFQUF5Qlksc0NBQXpCLEVBQXVEQyxVQUFVLElBQWpFLEVBREcsRUFFSCxFQUFFYixNQUFNLFFBQVIsRUFBa0JjLE1BQU1aLHNCQUF4QixFQUFnRGEsY0FBYyxLQUFLLENBQW5FLEVBRkcsRUFHSCxFQUFFZixNQUFNLFVBQVIsRUFBb0JjLE1BQU1aLHNCQUExQixFQUFrRGEsY0FBYyxLQUFLLENBQXJFLEVBSEcsRUFJSCxFQUFFZixNQUFNLFdBQVIsRUFBcUJjLE1BQU1aLHNCQUEzQixFQUFtRGEsY0FBYyxLQUFLLENBQXRFLEVBSkcsRUFLSCxFQUFFZixNQUFNLFNBQVIsRUFBbUJZLDhCQUFuQixFQUF5Q0csY0FBYyxJQUF2RCxFQUxHLEVBTUgsRUFBRWYsTUFBTSxTQUFSLEVBQW1CWSw2QkFBbkIsRUFBd0NFLE1BQU1mLG9CQUE5QyxFQUFvRWMsVUFBVSxJQUE5RSxFQU5HLENBQVA7QUFRSDtBQWRxRDtrQkFBckNOLGdCIiwiZmlsZSI6InRlc3QtcnVuL2NvbW1hbmRzL2Fzc2VydGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUWVBFIGZyb20gJy4vdHlwZSc7XG5pbXBvcnQgQ29tbWFuZEJhc2UgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IEFzc2VydGlvbk9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBBc3NlcnRpb25FeGVjdXRhYmxlQXJndW1lbnRFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycy90ZXN0LXJ1bic7XG5pbXBvcnQgZXhlY3V0ZUpzRXhwcmVzc2lvbiBmcm9tICcuLi9leGVjdXRlLWpzLWV4cHJlc3Npb24nO1xuaW1wb3J0IHsgaXNKU0V4cHJlc3Npb24gfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgc3RyaW5nQXJndW1lbnQsIGFjdGlvbk9wdGlvbnMsIG5vbkVtcHR5U3RyaW5nQXJndW1lbnQgfSBmcm9tICcuL3ZhbGlkYXRpb25zL2FyZ3VtZW50JztcblxuLy8gSW5pdGlhbGl6ZXJzXG5mdW5jdGlvbiBpbml0QXNzZXJ0aW9uT3B0aW9ucyAobmFtZSwgdmFsKSB7XG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb25PcHRpb25zKHZhbCwgdHJ1ZSk7XG59XG5cbi8vSW5pdGlhbGl6ZXJzXG5mdW5jdGlvbiBpbml0QXNzZXJ0aW9uUGFyYW1ldGVyIChuYW1lLCB2YWwsIHsgc2tpcFZpc2liaWxpdHlDaGVjaywgdGVzdFJ1biB9KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzSlNFeHByZXNzaW9uKHZhbCkpXG4gICAgICAgICAgICB2YWwgPSBleGVjdXRlSnNFeHByZXNzaW9uKHZhbC52YWx1ZSwgdGVzdFJ1biwgeyBza2lwVmlzaWJpbGl0eUNoZWNrIH0pO1xuXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkV4ZWN1dGFibGVBcmd1bWVudEVycm9yKG5hbWUsIHZhbC52YWx1ZSwgZXJyLCBlcnIgaW5zdGFuY2VvZiBBUElFcnJvcik7XG4gICAgfVxufVxuXG4vLyBDb21tYW5kc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXNzZXJ0aW9uQ29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS5hc3NlcnRpb24pO1xuICAgIH1cblxuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IG5hbWU6ICdhc3NlcnRpb25UeXBlJywgdHlwZTogbm9uRW1wdHlTdHJpbmdBcmd1bWVudCwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2FjdHVhbCcsIGluaXQ6IGluaXRBc3NlcnRpb25QYXJhbWV0ZXIsIGRlZmF1bHRWYWx1ZTogdm9pZCAwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdleHBlY3RlZCcsIGluaXQ6IGluaXRBc3NlcnRpb25QYXJhbWV0ZXIsIGRlZmF1bHRWYWx1ZTogdm9pZCAwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdleHBlY3RlZDInLCBpbml0OiBpbml0QXNzZXJ0aW9uUGFyYW1ldGVyLCBkZWZhdWx0VmFsdWU6IHZvaWQgMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnbWVzc2FnZScsIHR5cGU6IHN0cmluZ0FyZ3VtZW50LCBkZWZhdWx0VmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ29wdGlvbnMnLCB0eXBlOiBhY3Rpb25PcHRpb25zLCBpbml0OiBpbml0QXNzZXJ0aW9uT3B0aW9ucywgcmVxdWlyZWQ6IHRydWUgfVxuICAgICAgICBdO1xuICAgIH1cbn1cbiJdfQ==
