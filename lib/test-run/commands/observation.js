'use strict';

exports.__esModule = true;
exports.DebugCommand = exports.ExecuteSelectorCommand = exports.ExecuteClientFunctionCommand = exports.WaitCommand = undefined;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _argument = require('./validations/argument');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Commands
class WaitCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.wait);
    }

    _getAssignableProperties() {
        return [{ name: 'timeout', type: _argument.positiveIntegerArgument, required: true }];
    }
}

exports.WaitCommand = WaitCommand;
class ExecuteClientFunctionCommandBase extends _base2.default {
    constructor(obj, testRun, type) {
        super(obj, testRun, type, false);
    }

    _getAssignableProperties() {
        return [{ name: 'instantiationCallsiteName', defaultValue: '' }, { name: 'fnCode', defaultValue: '' }, { name: 'args', defaultValue: [] }, { name: 'dependencies', defaultValue: [] }];
    }
}

class ExecuteClientFunctionCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.executeClientFunction);
    }
}

exports.ExecuteClientFunctionCommand = ExecuteClientFunctionCommand;
class ExecuteSelectorCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.executeSelector);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'visibilityCheck', defaultValue: false }, { name: 'timeout', defaultValue: null }, { name: 'apiFnChain' }, { name: 'needError' }, { name: 'index', defaultValue: 0 }]);
    }
}

exports.ExecuteSelectorCommand = ExecuteSelectorCommand;
class DebugCommand {
    constructor() {
        this.type = _type2.default.debug;
    }
}
exports.DebugCommand = DebugCommand;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9vYnNlcnZhdGlvbi5qcyJdLCJuYW1lcyI6WyJXYWl0Q29tbWFuZCIsImNvbnN0cnVjdG9yIiwib2JqIiwidGVzdFJ1biIsIndhaXQiLCJfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMiLCJuYW1lIiwidHlwZSIsInJlcXVpcmVkIiwiRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZEJhc2UiLCJkZWZhdWx0VmFsdWUiLCJFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kIiwiZXhlY3V0ZUNsaWVudEZ1bmN0aW9uIiwiRXhlY3V0ZVNlbGVjdG9yQ29tbWFuZCIsImV4ZWN1dGVTZWxlY3RvciIsImNvbmNhdCIsIkRlYnVnQ29tbWFuZCIsImRlYnVnIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBO0FBQ08sTUFBTUEsV0FBTix3QkFBc0M7QUFDekNDLGdCQUFhQyxHQUFiLEVBQWtCQyxPQUFsQixFQUEyQjtBQUN2QixjQUFNRCxHQUFOLEVBQVdDLE9BQVgsRUFBb0IsZUFBS0MsSUFBekI7QUFDSDs7QUFFREMsK0JBQTRCO0FBQ3hCLGVBQU8sQ0FDSCxFQUFFQyxNQUFNLFNBQVIsRUFBbUJDLHVDQUFuQixFQUFrREMsVUFBVSxJQUE1RCxFQURHLENBQVA7QUFHSDtBQVR3Qzs7UUFBaENSLFcsR0FBQUEsVztBQVliLE1BQU1TLGdDQUFOLHdCQUEyRDtBQUN2RFIsZ0JBQWFDLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCSSxJQUEzQixFQUFpQztBQUM3QixjQUFNTCxHQUFOLEVBQVdDLE9BQVgsRUFBb0JJLElBQXBCLEVBQTBCLEtBQTFCO0FBQ0g7O0FBRURGLCtCQUE0QjtBQUN4QixlQUFPLENBQ0gsRUFBRUMsTUFBTSwyQkFBUixFQUFxQ0ksY0FBYyxFQUFuRCxFQURHLEVBRUgsRUFBRUosTUFBTSxRQUFSLEVBQWtCSSxjQUFjLEVBQWhDLEVBRkcsRUFHSCxFQUFFSixNQUFNLE1BQVIsRUFBZ0JJLGNBQWMsRUFBOUIsRUFIRyxFQUlILEVBQUVKLE1BQU0sY0FBUixFQUF3QkksY0FBYyxFQUF0QyxFQUpHLENBQVA7QUFNSDtBQVpzRDs7QUFlcEQsTUFBTUMsNEJBQU4sU0FBMkNGLGdDQUEzQyxDQUE0RTtBQUMvRVIsZ0JBQWFDLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ3ZCLGNBQU1ELEdBQU4sRUFBV0MsT0FBWCxFQUFvQixlQUFLUyxxQkFBekI7QUFDSDtBQUg4RTs7UUFBdEVELDRCLEdBQUFBLDRCO0FBTU4sTUFBTUUsc0JBQU4sU0FBcUNKLGdDQUFyQyxDQUFzRTtBQUN6RVIsZ0JBQWFDLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ3ZCLGNBQU1ELEdBQU4sRUFBV0MsT0FBWCxFQUFvQixlQUFLVyxlQUF6QjtBQUNIOztBQUVEVCwrQkFBNEI7QUFDeEIsZUFBTyxNQUFNQSx3QkFBTixHQUFpQ1UsTUFBakMsQ0FBd0MsQ0FDM0MsRUFBRVQsTUFBTSxpQkFBUixFQUEyQkksY0FBYyxLQUF6QyxFQUQyQyxFQUUzQyxFQUFFSixNQUFNLFNBQVIsRUFBbUJJLGNBQWMsSUFBakMsRUFGMkMsRUFHM0MsRUFBRUosTUFBTSxZQUFSLEVBSDJDLEVBSTNDLEVBQUVBLE1BQU0sV0FBUixFQUoyQyxFQUszQyxFQUFFQSxNQUFNLE9BQVIsRUFBaUJJLGNBQWMsQ0FBL0IsRUFMMkMsQ0FBeEMsQ0FBUDtBQU9IO0FBYndFOztRQUFoRUcsc0IsR0FBQUEsc0I7QUFnQk4sTUFBTUcsWUFBTixDQUFtQjtBQUN0QmYsa0JBQWU7QUFDWCxhQUFLTSxJQUFMLEdBQVksZUFBS1UsS0FBakI7QUFDSDtBQUhxQjtRQUFiRCxZLEdBQUFBLFkiLCJmaWxlIjoidGVzdC1ydW4vY29tbWFuZHMvb2JzZXJ2YXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVFlQRSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IENvbW1hbmRCYXNlIGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBwb3NpdGl2ZUludGVnZXJBcmd1bWVudCB9IGZyb20gJy4vdmFsaWRhdGlvbnMvYXJndW1lbnQnO1xuXG4vLyBDb21tYW5kc1xuZXhwb3J0IGNsYXNzIFdhaXRDb21tYW5kIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4pIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCBUWVBFLndhaXQpO1xuICAgIH1cblxuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IG5hbWU6ICd0aW1lb3V0JywgdHlwZTogcG9zaXRpdmVJbnRlZ2VyQXJndW1lbnQsIHJlcXVpcmVkOiB0cnVlIH1cbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmNsYXNzIEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmRCYXNlIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4sIHR5cGUpIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCB0eXBlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgbmFtZTogJ2luc3RhbnRpYXRpb25DYWxsc2l0ZU5hbWUnLCBkZWZhdWx0VmFsdWU6ICcnIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdmbkNvZGUnLCBkZWZhdWx0VmFsdWU6ICcnIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdhcmdzJywgZGVmYXVsdFZhbHVlOiBbXSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnZGVwZW5kZW5jaWVzJywgZGVmYXVsdFZhbHVlOiBbXSB9XG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZCBleHRlbmRzIEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS5leGVjdXRlQ2xpZW50RnVuY3Rpb24pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV4ZWN1dGVTZWxlY3RvckNvbW1hbmQgZXh0ZW5kcyBFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUuZXhlY3V0ZVNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gc3VwZXIuX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzKCkuY29uY2F0KFtcbiAgICAgICAgICAgIHsgbmFtZTogJ3Zpc2liaWxpdHlDaGVjaycsIGRlZmF1bHRWYWx1ZTogZmFsc2UgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ3RpbWVvdXQnLCBkZWZhdWx0VmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2FwaUZuQ2hhaW4nIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICduZWVkRXJyb3InIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdpbmRleCcsIGRlZmF1bHRWYWx1ZTogMCB9XG4gICAgICAgIF0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlYnVnQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBUWVBFLmRlYnVnO1xuICAgIH1cbn1cblxuIl19
